
========================================
codepen
========================================

html/css/javascript
html is the structure / order
css in the style and layout
javascript is the logic

========================================
jquery selectors
========================================
https://api.jquery.com/category/selectors/

jquery said, "let's take the ability we already have in css and apply it to js"
easier than xpath, uses same selector syntax as CSS

lets you select
- elements (id,attribute, name, etc..)
- attribute values
- form elements
- heirarchy (parent,child,descendant, sibling)
- elements by state (enabled,enabled,hidden)
- position
- class name

Syntax:
========================================
$("selector");
$("selector").method();


Select multiple elements out of the DOM
========================================
$("selector1, selector2, selector N");
$("element[attr='value'][attr='value2']");

Select wrapped sets
========================================
Treat sets of element as an array so you can grab individual elements
$("selector")[0];
$("selector").get(0);

Adds to wrapped set but not DOM
better for performance
========================================
$("selector").add("<div>Added content</div>");


Dom access and traversal is expensive.  think about the dom tree with its parents and children.  When you go to select things, think about performance.  You could be grabbing too many elements.  Consider the best selector for the job - select things with precision.


========================================
DOM Element Selectors
========================================

All
========================================
("*")
Selects all elements

Animated
========================================
:animated
Select all elements that are in the progress of an animation at the time the selector is run.

Attribute Contains Prefix Selector
========================================
[name|=”value”]
Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).

Attribute Contains Selector
========================================
[name*=”value”]
Selects elements that have the specified attribute with a value containing a given substring.

Attribute Contains Word Selector
========================================
[name~=”value”]
Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.

Attribute Ends With Selector
========================================
[name$=”value”]
Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.

Attribute Equals Selector
========================================
[name=”value”]
Selects elements that have the specified attribute with a value exactly equal to a certain value.

Attribute Not Equal Selector
========================================
[name!=”value”]
Select elements that either don’t have the specified attribute, or do have the specified attribute but not with a certain value.

Attribute Starts With Selector
========================================
[name^=”value”]
Selects elements that have the specified attribute with a value beginning exactly with a given string.

Button Selector
========================================
:button
Selects all button elements and elements of type button.

Checkbox Selector
========================================
:checkbox
Selects all elements of type checkbox.

Checked Selector
========================================
:checked
Matches all elements that are checked or selected.

Child Selector
========================================
(“parent > child”)
Selects all direct child elements specified by “child” of elements specified by “parent”.

Class Selector
========================================
(“.class”)
Selects all elements with the given class.

Contains Selector
========================================
:contains()
Select all elements that contain the specified text.

Descendant Selector
========================================
(“ancestor descendant”)
Selects all elements that are descendants of a given ancestor.

Disabled Selector
========================================
:disabled
Selects all elements that are disabled.

Element Selector
========================================
(“element”)
Selects all elements with the given tag name.

Empty Selector
========================================
:empty
Select all elements that have no children (including text nodes).

Enabled Selector
========================================
:enabled
Selects all elements that are enabled.

Index Equals Selector
========================================
:eq()
Select the element at index n within the matched set.

Even Selector
========================================
:even
Selects even elements, zero-indexed. See also odd.

File Selector
========================================
:file
Selects all elements of type file.

First Child Selector
========================================
:first-child
Selects all elements that are the first child of their parent.

First-of-Type Selector
========================================
:first-of-type
Selects all elements that are the first among siblings of the same element name.

First Selector
========================================
:first
Selects the first matched element.

Focus Selector
========================================
:focus
Selects element if it is currently focused.

Greater Than Selector
========================================
:gt()
Select all elements at an index greater than index within the matched set.

Has Attribute Selector
========================================
[name]
Selects elements that have the specified attribute, with any value.

Has Selector
========================================
:has()
Selects elements which contain at least one element that matches the specified selector.

Header Selector
========================================
:header
Selects all elements that are headers, like h1, h2, h3 and so on.

Hidden Selector
========================================
:hidden
Selects all elements that are hidden.

ID Selector
========================================
(“#id”)
Selects a single element with the given id attribute.

Image Selector
========================================
:image
Selects all elements of type image.

Input Selector
========================================
:input 
Selects all input, textarea, select and button elements.

Language Selector
========================================
:lang()
Selects all elements of the specified language.

Last Child Selector
========================================
:last-child
Selects all elements that are the last child of their parent.

Last-of-Type Selector
========================================
:last-of-type
Selects all elements that are the last among siblings of the same element name.
 
Last Selector
========================================
:last
Selects the last matched element.

Less Than Selector
========================================
:lt()
Select all elements at an index less than index within the matched set.

Multiple Attribute Selector
========================================
[name=”value”][name2=”value2″]
Matches elements that match all of the specified attribute filters.

Multiple Selector
========================================
(“selector1, selector2, selectorN”)
Selects the combined results of all the specified selectors.

Next Adjacent Selector
========================================
(“prev + next”)
Selects all next elements matching “next” that are immediately preceded by a sibling “prev”.

Next Siblings Selector
========================================
(“prev ~ siblings”)
Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.

Not Selector
========================================
:not()
Selects all elements that do not match the given selector.

nth-child Selector
========================================
:nth-child()
Selects all elements that are the nth-child of their parent.

nth-last-child Selector
========================================
:nth-last-child()
Selects all elements that are the nth-child of their parent, counting from the last element to the first.

nth-last-of-type Selector
========================================
:nth-last-of-type()
Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.

nth-of-type Selector
========================================
:nth-of-type()
Selects all elements that are the nth child of their parent in relation to siblings with the same element name.

Odd Selector
========================================
:odd
Selects odd elements, zero-indexed. See also even.

Only Child Selector
========================================
:only-child
Selects all elements that are the only child of their parent.

Only-of-type Selector
========================================
:only-of-type
Selects all elements that have no siblings with the same element name.

Parent Selector
========================================
:parent
Select all elements that have at least one child node (either an element or text).

Password Selector
========================================
:password
Selects all elements of type password.

Radio Selector
========================================
:radio
Selects all elements of type radio.

Reset Selector
========================================
:reset
Selects all elements of type reset.

Root Selector
========================================
:root
Selects the element that is the root of the document.

Selected Selector
========================================
:selected 
Selects all elements that are selected.

Submit Selector
========================================
:submit
Selects all elements of type submit.

Target Selector
========================================
:target
Selects the target element indicated by the fragment identifier of the document’s URI.

Text Selector
========================================
:text
Selects all input elements of type text.

Visible Selector
========================================
:visible
Selects all elements that are visible.


Escaping meta-characters in selectors:
========================================
To use any of the meta-characters ( such as  !"#$%&'()*+,./:;<=>?@[\]^`{|}~ ) as a literal part of a name, it must be escaped with with two backslashes: \\. For example, an element with id="foo.bar", can use the selector $("#foo\\.bar"). The W3C CSS specification contains the complete set of rules regarding valid CSS selectors. Also useful is the blog entry by Mathias Bynens on CSS character escape sequences for identifiers.

W3C Rules: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
CSS Escape Sequences: ttps://mathiasbynens.be/notes/css-escapes


There are 5 categories of jquery selectors:

Basic Selectors (CSS Compatible)
========================================
$("*");
$("elementName");
$("#elementId");
$(".class");

Attribute Selectors
========================================
$("selector[attr]");
$("selector[attr='value']");
$("selector[attr^='value']");
$("selector[attr$='value']");
$("selector[attr*='value']");

Hierarchy Selectors
========================================
$("ancestor descendant");
$("parent > child");
$("prev element + next element");
$("prev sibling + next sibling");

Positional Selectors
========================================
$("element:first");
$("element:last");

jQuery Specific Filter Selectors
========================================
$(":button");
$(":checkbox");
$(":password");
$(":submit");
$(":text");
$(":file");
$(":contains(text)");
$(":not(selector)"); // selector can be #id, .class, or any kind of mix and match


========================================
jQuery Chaining
========================================
Run multiple commands/methods on a wrapped set while only accessing those DOM elements once.

Select DOM element once and through chaining you can apply multiple commands.  Let's change the background color on all paragraphs to red while at the same time changing the font color to green.

$("p").css("background-color","red").css("color","green");

Chaining Syntax
========================================
$("selector").method();
$("selector").method1().method2();

You can pass in arguments as well.



